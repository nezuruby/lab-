//	WAP to implement Lexical Analyzer to identify tokens.//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
int isKeyword(char buffer[]) {
    char keywords[32][10] = {"auto", "break", "case", "char", "const", "continue", "default",
                             "do", "double", "else", "enum", "extern", "float", "for", "goto",
                             "if", "int", "long", "register", "return", "short", "signed",
                             "sizeof", "static", "struct", "switch", "typedef", "union",
                             "unsigned", "void", "volatile", "while"};
    for (int i = 0; i < 32; ++i) {
        if (strcmp(keywords[i], buffer) == 0) {
            return 1; // It's a keyword
        }
    }
    return 0; // It's not a keyword
}
int main() {
    char ch, buffer[15];
    const char operators[] = "+-*/%=";
    FILE *fp;
    int i, j = 0;
    fp = fopen("aa.txt", "r");
    if (fp == NULL) {
        printf("Error while opening the file\n");
        exit(EXIT_FAILURE);
    }
    while ((ch = fgetc(fp)) != EOF) {
        // Check if the character is an operator
        if (strchr(operators, ch)) {
            printf("%c is operator\n", ch);
        }
        // Check if the character is alphanumeric or underscore
        if (isalnum(ch) || ch == '_') {
            buffer[j++] = ch;
        } else if ((ch == ' ' || ch == '\n') && j != 0) {
            buffer[j] = '\0'; // Null-terminate the buffer
            j = 0; // Reset buffer index
            if (isKeyword(buffer)) {
                printf("%s is keyword\n", buffer);
            } else {
                printf("%s is identifier\n", buffer);
            }
        }
    }
    // Check the last buffered identifier if any
    if (j > 0) {
        buffer[j] = '\0'; // Null-terminate the buffer
        if (isKeyword(buffer)) {
            printf("%s is keyword\n", buffer);
        } else {
            printf("%s is identifier\n", buffer);
        }
    }
    fclose(fp);
    return 0;
}
